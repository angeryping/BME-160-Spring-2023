#!/usr/bin/env python3
# Name: Justin Jang (jjang12)
# Group Members: Aster Lathbury(mlathbur), Kimberly Magpantay(klmagpan), Faiz Khan(faahkhan)

"""
Read a file of FastA sequences from STDIN. Find the unique subsequences that occur in each single tRNA such that no members of this set occur among any other tRNA sets.
No member of a unique subsequence set is a substring of any other member of this set.

Example:
ACG and AAACGA are in the Unique set.

Since ACG occurs in AACGA, AACGA would be removed. ACG is Essential.

Output:
L1: tRNA name
L2: tRNA sequence with alignment characters removed
L3-onwards: each unique element
"""

import sys
class FastAreader :
    
    def __init__ (self, fname=''):
        '''contructor: saves attribute fname '''
        self.fname = fname
            
    def doOpen (self):
        if self.fname == '':
            return sys.stdin
        else:
            return open(self.fname)
        
    def readFasta (self):
        
        header = ''
        sequence = ''
        
        with self.doOpen() as fileH:
            
            header = ''
            sequence = ''
            
            # skip to first fasta header
            line = fileH.readline()
            while not line.startswith('>') :
                if not line: # we are at EOF
                    return header, sequence
                line = fileH.readline()
            header = line[1:].rstrip()

            for line in fileH:
                if line.startswith ('>'):
                    yield header,sequence
                    header = line[1:].rstrip()
                    sequence = ''
                else :
                    sequence += ''.join(line.rstrip().split()).upper()

        yield header,sequence

class findUnique:

    #TA notes:
    # 3 classes needed minimum
    #powerSet, unique, essential
    def __init__(self):
        self.seqList = []  # contains list
        self.uniqueList = []  # tRNA substring list
        self.headSeqDict = {}  # sequence saving dictionary
        count = 0

        for head, seq, in FastAreader.readFasta():
                self.seqList.append[seq.replace('-','').replace('.','').replace('_','')]
                self.seqList.upper().strip()
    ##seqList = (CleanedSeq1, CleanedSeq2, CleanedSeq3....)
                self.headSeqDict[count] = [head, seq]
                mypowerSet = self.powerSet(seq)
                self.seqList.append(mypowerSet)  # Add power set (after finding) for each tRNA to a list.
                count += 1

    def powerSet(self,seq):
        '''Return tRNA substrings'''
        powerSet = set()
        for i in range(len(seq)):
            size = len(seq)
            while size > i:
                powerSet.add(seq[i:size])
                size -= 1
        return powerSet

    def unique(self):
        '''Search for duplicate tRNA sequences. Remove to get all unique subsets of tRNA sequences.'''
        for allSet in self.seqList:
            union = set()
            copySet = set()
            for powerSet in self.seqList:
                if powerSet != allSet:
                    for item in powerSet:
                        union.add(item)
            copySet = allSet - union

            newSet = set()
            for element in copySet:
                    newSet.add(element)
            for string1 in copySet:  # checks prior strings to identify more possible substrings
                #uniqueSet = copySet.copy()
                uniqueSet = set()
                for element in copySet:
                    if element != string1:
                        uniqueSet.add(element)
                #uniqueSet.remove(string1)
                for string2 in uniqueSet:
                    if string1 in string2:
                        if len(string1) < len(string2):
                            newSet.discard(string2)  # Gets rid of teh larger substrings.
                
            self.uniqueList.append(newSet)
    
    def printSeq():
        """
        Prints sequences to the command line
        """
        for index in range(len(findUnique.headSeqDict)):
            mySequence = findUnique.headSeqDict[index]
            header = mySequence[0]
            sequence = mySequence[1]

            print(header)
            print(sequence)

            size = len(sequence)
            for position in range(size):
                for substring in findUnique.uniqueList[index]:
                    substringLength = len(substring)

                    if substring == sequence[position:position + substringLength]:
                        output = ('.') * position + substring
                        print(output)
########################################################################
# Main
# Here is the main program
# 
########################################################################

def main(inCL=None):
    ''' '''
    findUnique.unique()
    findUnique.printSeq()

if __name__ == "__main__":
    main()